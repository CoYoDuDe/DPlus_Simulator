#!/bin/sh
set -eu
IFS="$(printf ' \t\n')"

if [ -z "${BASH_VERSION:-}" ]; then
  if command -v bash >/dev/null 2>&1; then
    exec bash "$0" "$@"
  fi
  printf '%s\n' "Dieses Skript erfordert bash." >&2
  exit 1
fi

SCRIPT_PATH="$0"

SCRIPT_PATH="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd -P)/$(basename "${SCRIPT_PATH}")"

if command -v readlink >/dev/null 2>&1; then
  while [ -L "${SCRIPT_PATH}" ]; do
    link_target="$(readlink "${SCRIPT_PATH}")"
    case "${link_target}" in
      /*)
        SCRIPT_PATH="${link_target}"
        ;;
      *)
        link_dir="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd -P)"
        SCRIPT_PATH="${link_dir}/${link_target}"
        ;;
    esac
    SCRIPT_PATH="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd -P)/$(basename "${SCRIPT_PATH}")"
  done
fi

SCRIPT_DIR="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd -P)"
PROJECT_ROOT="${SCRIPT_DIR}"
INSTALL_ROOT="${INSTALL_ROOT:-/opt/dplus_sim}"
SERVICE_NAME="com.coyodude.dplussim"
SERVICE_INSTALL_DIR="${INSTALL_ROOT}/services/${SERVICE_NAME}"
DEFAULT_HELPER_INCLUDE="${PROJECT_ROOT}/SetupHelper/HelperResources/IncludeHelpers"
HELPER_RESOURCE="${HELPER_RESOURCE:-${DEFAULT_HELPER_INCLUDE}}"
SETTINGS_BASE_PATH="/Settings/Devices/DPlusSim"
PACKAGE_DEPENDENCIES_FILE="${PROJECT_ROOT}/packageDependencies"

REQUIRED_SETUP_HELPER_VERSION="8.10"
SETUP_HELPER_DETECTED_ROOT=""
SETUP_HELPER_VERSION_RAW=""
SETUP_HELPER_VERSION_NORMALIZED=""
RESOLVED_CLI_ACTION=""

filesUpdated=false
servicesUpdated=false
dbusSettingsUpdated=false
_dbus_settings_entries_payload=""
_dbus_settings_entry_count=0
_dbus_settings_multiline=""
DBUS_SETTINGS_FILENAME="DbusSettingsList"
DBUS_SETTINGS_STAGING_FILE="${PROJECT_ROOT}/${DBUS_SETTINGS_FILENAME}"
DBUS_SETTINGS_PERSISTENT_FILE="${INSTALL_ROOT}/${DBUS_SETTINGS_FILENAME}"
DBUS_SETTINGS_STAGING_BACKUP=""
DBUS_SETTINGS_PERSISTENT_BACKUP=""
DBUS_SETTINGS_STAGING_CREATED=false
DBUS_SETTINGS_PERSISTENT_UPDATED=false
DBUS_SETTINGS_OPERATION=""
LAST_PACKAGE_DEPENDENCY_CHECK_STATUS=""
LAST_PACKAGE_DEPENDENCY_CHECK_ACTION=""
LAST_PACKAGE_DEPENDENCY_CHECK_INSTALL_FAILED=""
LAST_PACKAGE_DEPENDENCY_CHECK_FAIL_MESSAGE=""
LAST_PACKAGE_DEPENDENCY_CHECK_CONFLICT=false

uppercase() {
  if [ "$#" -eq 0 ]; then
    return 0
  fi
  printf '%s' "$1" | tr '[:lower:]' '[:upper:]'
}

lowercase() {
  if [ "$#" -eq 0 ]; then
    return 0
  fi
  printf '%s' "$1" | tr '[:upper:]' '[:lower:]'
}

log() {
  __dplus_log_level_input="${1:-}"
  __dplus_log_level="$(uppercase "${__dplus_log_level_input}")"
  if [ "$#" -gt 0 ]; then
    shift
  fi
  if command -v -- logMessage >/dev/null 2>&1; then
    logMessage "${__dplus_log_level}" "$*"
    return
  fi
  printf '[%s] %s\n' "${__dplus_log_level}" "$*"
}

die() {
  log ERROR "$*"
  exit 1
}

trim_whitespace() (
  __dplus_trim_value="${1:-}"
  __dplus_trim_value="${__dplus_trim_value#${__dplus_trim_value%%[![:space:]]*}}"
  __dplus_trim_value="${__dplus_trim_value%${__dplus_trim_value##*[![:space:]]}}"
  printf '%s' "${__dplus_trim_value}"
)

normalize_version_string() (
  __dplus_normalize_raw="$(trim_whitespace "${1:-}")"
  __dplus_normalize_raw="${__dplus_normalize_raw#v}"
  __dplus_normalize_raw="${__dplus_normalize_raw#V}"
  __dplus_normalize_raw="${__dplus_normalize_raw%%[^0-9.]*}"
  __dplus_normalize_raw="$(trim_whitespace "${__dplus_normalize_raw}")"
  printf '%s' "${__dplus_normalize_raw}"
)

resolve_setup_helper_root_from_candidate() (
  __dplus_resolve_candidate="$1"
  __dplus_resolve_base=""

  if [ -z "${__dplus_resolve_candidate}" ]; then
    return 1
  fi

  if [ -f "${__dplus_resolve_candidate}" ]; then
    __dplus_resolve_base="$(cd "$(dirname "${__dplus_resolve_candidate}")" && pwd -P 2>/dev/null)" || return 1
  else
    __dplus_resolve_base="$(cd "${__dplus_resolve_candidate}" && pwd -P 2>/dev/null)" || return 1
  fi

  if [ -z "${__dplus_resolve_base}" ]; then
    return 1
  fi

  if [ "${__dplus_resolve_base##*/}" = "HelperResources" ]; then
    __dplus_resolve_base="$(cd "${__dplus_resolve_base}/.." && pwd -P 2>/dev/null)" || return 1
  fi

  if [ -n "${__dplus_resolve_base}" ]; then
    printf '%s\n' "${__dplus_resolve_base}"
    return 0
  fi

  return 1
)

remember_setup_helper_root() {
  __dplus_remember_candidate="$1"
  __dplus_remember_resolved=""

  if [ -z "${__dplus_remember_candidate}" ]; then
    return
  fi

  if __dplus_remember_resolved="$(resolve_setup_helper_root_from_candidate "${__dplus_remember_candidate}")"; then
    if [ -n "${__dplus_remember_resolved}" ]; then
      SETUP_HELPER_DETECTED_ROOT="${__dplus_remember_resolved}"
    fi
  fi
}

detect_setuphelper_version() {
  __dplus_detect_version_candidates=()
  __dplus_detect_helper_cmd=""
  __dplus_detect_candidate=""

  if [ -n "${SETUP_HELPER_DETECTED_ROOT:-}" ]; then
    __dplus_detect_version_candidates+=("${SETUP_HELPER_DETECTED_ROOT}/version")
  fi

  for __dplus_detect_helper_cmd in setuphelper SetupHelper helperctl; do
    if command -v "${__dplus_detect_helper_cmd}" >/dev/null 2>&1; then
      __dplus_detect_helper_bin="$(command -v "${__dplus_detect_helper_cmd}")"
      __dplus_detect_helper_root="$(cd "$(dirname "${__dplus_detect_helper_bin}")/.." && pwd -P 2>/dev/null)" || true
      if [ -n "${__dplus_detect_helper_root}" ]; then
        __dplus_detect_version_candidates+=("${__dplus_detect_helper_root}/version")
      fi
    fi
  done

  __dplus_detect_version_candidates+=(
    "/data/SetupHelper/version"
    "/opt/venus/SetupHelper/version"
    "/opt/venusOS/SetupHelper/version"
    "/usr/share/SetupHelper/version"
    "${PROJECT_ROOT}/SetupHelper/version"
  )

  for __dplus_detect_candidate in "${__dplus_detect_version_candidates[@]}"; do
    [ -z "${__dplus_detect_candidate}" ] && continue

    if [ -f "${__dplus_detect_candidate}" ]; then
      __dplus_detect_raw_version="$(<"${__dplus_detect_candidate}")"
      __dplus_detect_raw_version="${__dplus_detect_raw_version//$'\r'/}"
      __dplus_detect_raw_version="${__dplus_detect_raw_version//$'\n'/}"
      __dplus_detect_raw_version="$(trim_whitespace "${__dplus_detect_raw_version}")"

      if [ -n "${__dplus_detect_raw_version}" ]; then
        SETUP_HELPER_VERSION_RAW="${__dplus_detect_raw_version}"
        __dplus_detect_normalized="$(normalize_version_string "${__dplus_detect_raw_version}")"
        if [ -n "${__dplus_detect_normalized}" ]; then
          SETUP_HELPER_VERSION_NORMALIZED="${__dplus_detect_normalized}"
          return 0
        fi
      fi
    fi
  done

  return 1
}

version_ge() (
  __dplus_version_ge_current="$1"
  __dplus_version_ge_required="$2"
  __dplus_version_ge_placeholder='__EMPTY_COMPONENT__'
  __dplus_version_ge_current_list=""
  __dplus_version_ge_required_list=""
  __dplus_version_ge_current_value=""
  __dplus_version_ge_required_value=""
  __dplus_version_ge_current_number=0
  __dplus_version_ge_required_number=0

  IFS='.'
  set -- ${__dplus_version_ge_current}
  while [ "$#" -gt 0 ]; do
    __dplus_version_ge_current_value="$1"
    shift
    if [ -z "${__dplus_version_ge_current_value}" ]; then
      __dplus_version_ge_current_value="${__dplus_version_ge_placeholder}"
    fi
    __dplus_version_ge_current_list="${__dplus_version_ge_current_list}${__dplus_version_ge_current_value} "
  done

  set -- ${__dplus_version_ge_required}
  while [ "$#" -gt 0 ]; do
    __dplus_version_ge_required_value="$1"
    shift
    if [ -z "${__dplus_version_ge_required_value}" ]; then
      __dplus_version_ge_required_value="${__dplus_version_ge_placeholder}"
    fi
    __dplus_version_ge_required_list="${__dplus_version_ge_required_list}${__dplus_version_ge_required_value} "
  done

  __dplus_version_ge_current_list="${__dplus_version_ge_current_list% }"
  __dplus_version_ge_required_list="${__dplus_version_ge_required_list% }"

  while [ -n "${__dplus_version_ge_current_list}" ] || [ -n "${__dplus_version_ge_required_list}" ]; do
    if [ -n "${__dplus_version_ge_current_list}" ]; then
      IFS=' '
      set -- ${__dplus_version_ge_current_list}
      __dplus_version_ge_current_value="$1"
      shift
      __dplus_version_ge_current_list="$*"
    else
      __dplus_version_ge_current_value="${__dplus_version_ge_placeholder}"
    fi

    if [ -n "${__dplus_version_ge_required_list}" ]; then
      IFS=' '
      set -- ${__dplus_version_ge_required_list}
      __dplus_version_ge_required_value="$1"
      shift
      __dplus_version_ge_required_list="$*"
    else
      __dplus_version_ge_required_value="${__dplus_version_ge_placeholder}"
    fi

    if [ "${__dplus_version_ge_current_value}" = "${__dplus_version_ge_placeholder}" ]; then
      __dplus_version_ge_current_value=""
    fi
    if [ "${__dplus_version_ge_required_value}" = "${__dplus_version_ge_placeholder}" ]; then
      __dplus_version_ge_required_value=""
    fi

    __dplus_version_ge_current_value="${__dplus_version_ge_current_value//[^0-9]/}"
    __dplus_version_ge_required_value="${__dplus_version_ge_required_value//[^0-9]/}"

    __dplus_version_ge_current_value="${__dplus_version_ge_current_value:-0}"
    __dplus_version_ge_required_value="${__dplus_version_ge_required_value:-0}"

    __dplus_version_ge_current_number=$((10#${__dplus_version_ge_current_value}))
    __dplus_version_ge_required_number=$((10#${__dplus_version_ge_required_value}))

    if [ "${__dplus_version_ge_current_number}" -gt "${__dplus_version_ge_required_number}" ]; then
      return 0
    fi

    if [ "${__dplus_version_ge_current_number}" -lt "${__dplus_version_ge_required_number}" ]; then
      return 1
    fi
  done

  return 0
)

require_setuphelper_version() {
  __dplus_require_setuphelper_version_required="$1"

  if [ -z "${__dplus_require_setuphelper_version_required}" ]; then
    return
  fi

  if ! detect_setuphelper_version; then
    die "SetupHelper-Version konnte nicht ermittelt werden. Bitte installieren Sie SetupHelper >= ${__dplus_require_setuphelper_version_required}."
  fi

  if [ -z "${SETUP_HELPER_VERSION_NORMALIZED}" ]; then
    die "SetupHelper-Version konnte nicht interpretiert werden."
  fi

  if ! version_ge "${SETUP_HELPER_VERSION_NORMALIZED}" "${__dplus_require_setuphelper_version_required}"; then
    die "Gefundene SetupHelper-Version ${SETUP_HELPER_VERSION_RAW:-${SETUP_HELPER_VERSION_NORMALIZED}} ist kleiner als erforderlich (${__dplus_require_setuphelper_version_required})."
  fi

  log INFO "SetupHelper-Version ${SETUP_HELPER_VERSION_RAW:-${SETUP_HELPER_VERSION_NORMALIZED}} erfüllt die Mindestanforderung ${__dplus_require_setuphelper_version_required}"
}

require_python3() {
  if ! command -v python3 >/dev/null 2>&1; then
    die "python3 ist nicht installiert. Bitte installieren Sie python3, bevor Sie fortfahren."
  fi
}

require_python_module() {
  __dplus_require_python_module_name="$1"

  if [ -z "${__dplus_require_python_module_name}" ]; then
    return
  fi

  set +e
  __dplus_require_python_module_output=""
  __dplus_require_python_module_output="$(python3 - "${__dplus_require_python_module_name}" <<'PY'
import importlib
import sys

module_name = sys.argv[1]

try:
    importlib.import_module(module_name)
except Exception as exc:  # pragma: no cover - best effort logging
    raise SystemExit(str(exc))
PY
)"
  __dplus_require_python_module_status=$?
  set -e

  if [ "${__dplus_require_python_module_status}" -ne 0 ]; then
    if [ -n "${__dplus_require_python_module_output}" ]; then
      log ERROR "python3 -c 'import ${__dplus_require_python_module_name}' fehlgeschlagen: ${__dplus_require_python_module_output}"
    fi
    die "Das Python-Modul ${__dplus_require_python_module_name} ist nicht verfügbar. Installieren Sie die Komponente und versuchen Sie es erneut."
  fi
}

copy_tree() {
  __dplus_copy_tree_src="$1"
  __dplus_copy_tree_dest="$2"
  mkdir -p "${__dplus_copy_tree_dest}"
  if command -v rsync >/dev/null 2>&1; then
    rsync -a --delete "${__dplus_copy_tree_src}/" "${__dplus_copy_tree_dest}/"
  else
    if [ -d "${__dplus_copy_tree_dest}" ]; then
      find "${__dplus_copy_tree_dest}" -mindepth 1 -exec rm -rf {} +
    fi
    tar -C "${__dplus_copy_tree_src}" -cf - . | tar -C "${__dplus_copy_tree_dest}" -xf -
  fi
}

process_file_sets_for_action() {
  __dplus_process_filesets_desired="${1:-}"
  __dplus_process_filesets_action_upper="$(uppercase "${__dplus_process_filesets_desired}")"

  __dplus_process_filesets_root=""
  if [ -d "${INSTALL_ROOT}/FileSets" ]; then
    __dplus_process_filesets_root="${INSTALL_ROOT}/FileSets"
  elif [ -d "${PROJECT_ROOT}/FileSets" ]; then
    __dplus_process_filesets_root="${PROJECT_ROOT}/FileSets"
  else
    log INFO "Keine FileSets gefunden – überspringe updateFileSets"
    return
  fi

  __dplus_process_filesets_previous_pkgFileSets="${pkgFileSets-}"
  __dplus_process_filesets_previous_version_independent="${versionIndependentFileSet-}"
  __dplus_process_filesets_previous_patch_dir="${patchSourceDir-}"
  __dplus_process_filesets_previous_file_set="${fileSet-}"
  __dplus_process_filesets_previous_package_name="${packageName-}"
  __dplus_process_filesets_previous_action="${scriptAction-}"
  __dplus_process_filesets_had_pkgFileSets=0
  __dplus_process_filesets_had_version_independent=0
  __dplus_process_filesets_had_patch_dir=0
  __dplus_process_filesets_had_file_set=0
  __dplus_process_filesets_had_package_name=0
  __dplus_process_filesets_had_action=0

  if [ "${pkgFileSets+set}" = set ]; then __dplus_process_filesets_had_pkgFileSets=1; fi
  if [ "${versionIndependentFileSet+set}" = set ]; then __dplus_process_filesets_had_version_independent=1; fi
  if [ "${patchSourceDir+set}" = set ]; then __dplus_process_filesets_had_patch_dir=1; fi
  if [ "${fileSet+set}" = set ]; then __dplus_process_filesets_had_file_set=1; fi
  if [ "${packageName+set}" = set ]; then __dplus_process_filesets_had_package_name=1; fi
  if [ "${scriptAction+set}" = set ]; then __dplus_process_filesets_had_action=1; fi

  pkgFileSets="${__dplus_process_filesets_root}"
  versionIndependentFileSet="${__dplus_process_filesets_root}/VersionIndependent"
  patchSourceDir="${__dplus_process_filesets_root}/PatchSource"
  fileSet="${__dplus_process_filesets_root}/${venusVersion-}"

  if [ -n "${__dplus_process_filesets_previous_package_name}" ]; then
    packageName="${__dplus_process_filesets_previous_package_name}"
  else
    packageName="DPlus_Simulator"
  fi

  if [ -n "${__dplus_process_filesets_action_upper}" ]; then
    scriptAction="${__dplus_process_filesets_action_upper}"
  fi

  __dplus_process_filesets_status=127
  if ! call_helper_function_if_available checkFileSets; then
    __dplus_process_filesets_status=$?
    if [ "${__dplus_process_filesets_status}" -ne 127 ]; then
      log WARN "checkFileSets meldete Status ${__dplus_process_filesets_status}"
    fi
  fi

  __dplus_process_filesets_status=127
  if ! call_helper_function_if_available updateFileSets; then
    __dplus_process_filesets_status=$?
    if [ "${__dplus_process_filesets_status}" -ne 127 ]; then
      log WARN "updateFileSets meldete Status ${__dplus_process_filesets_status}"
    fi
  fi

  if [ -n "${__dplus_process_filesets_previous_action}" ]; then
    scriptAction="${__dplus_process_filesets_previous_action}"
  elif [ "${__dplus_process_filesets_had_action}" -eq 0 ]; then
    unset scriptAction 2>/dev/null || true
  fi

  if [ "${__dplus_process_filesets_had_pkgFileSets}" -ne 0 ]; then
    pkgFileSets="${__dplus_process_filesets_previous_pkgFileSets}"
  else
    unset pkgFileSets 2>/dev/null || true
  fi

  if [ "${__dplus_process_filesets_had_version_independent}" -ne 0 ]; then
    versionIndependentFileSet="${__dplus_process_filesets_previous_version_independent}"
  else
    unset versionIndependentFileSet 2>/dev/null || true
  fi

  if [ "${__dplus_process_filesets_had_patch_dir}" -ne 0 ]; then
    patchSourceDir="${__dplus_process_filesets_previous_patch_dir}"
  else
    unset patchSourceDir 2>/dev/null || true
  fi

  if [ "${__dplus_process_filesets_had_file_set}" -ne 0 ]; then
    fileSet="${__dplus_process_filesets_previous_file_set}"
  else
    unset fileSet 2>/dev/null || true
  fi

  if [ "${__dplus_process_filesets_had_package_name}" -ne 0 ]; then
    packageName="${__dplus_process_filesets_previous_package_name}"
  else
    unset packageName 2>/dev/null || true
  fi
}
call_helper_function_if_available() {
  __dplus_call_helper_fn="$1"
  if [ "$#" -gt 0 ]; then
    shift
  fi
  if command -v -- "${__dplus_call_helper_fn}" >/dev/null 2>&1; then
    set +e
    "${__dplus_call_helper_fn}" "$@"
    __dplus_call_helper_status=$?
    set -e
    return "${__dplus_call_helper_status}"
  fi
  return 127
}

define_builtin_helper_fallback() {
  if [ -n "${__DPLUS_HELPER_FALLBACK_DEFINED:-}" ]; then
    return
  fi

  __DPLUS_HELPER_FALLBACK_DEFINED=1
  log WARN "Keine externen SetupHelper-Ressourcen gefunden – verwende integrierten Fallback"

  __dplus_helper_project_root="${PROJECT_ROOT:-$(pwd)}"
  __dplus_helper_state_dir="${__dplus_helper_project_root}/SetupHelper/.helper_state"
  mkdir -p "${__dplus_helper_state_dir}"

  logMessage() {
    __dplus_helper_log_message_level="${1:-INFO}"
    if [ "$#" -gt 0 ]; then
      shift
    fi
    __dplus_helper_log_message_timestamp="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
    __dplus_helper_log_message_level_upper="$(uppercase "${__dplus_helper_log_message_level}")"
    printf '[HELPER][%s][%s] %s\n' "${__dplus_helper_log_message_timestamp}" "${__dplus_helper_log_message_level_upper}" "$*"
  }

  helper_begin() {
    logMessage INFO "Starte Helper-Sitzung"
    mkdir -p "${__dplus_helper_state_dir}"
    return 0
  }

  helper_end() {
    __dplus_helper_end_flags="$*"
    if [ -n "${__dplus_helper_end_flags}" ]; then
      logMessage INFO "Beende Helper-Sitzung (Flags: ${__dplus_helper_end_flags})"
    else
      logMessage INFO "Beende Helper-Sitzung"
    fi
    return 0
  }

  beginScript() {
    helper_begin
  }

  endScript() {
    helper_end "$@"
  }

  helper_enable_dependency_conflict_checks() {
    logMessage INFO "Aktiviere Konfliktprüfungen (Fallback-No-Op)"
    return 0
  }

  helper_enable_package_conflict_checks() {
    helper_enable_dependency_conflict_checks
  }

  __dplus_helper_store_dependencies() {
    __dplus_helper_store_dependencies_src="$1"
    __dplus_helper_store_dependencies_dest="${__dplus_helper_state_dir}/packageDependencies"
    if [ ! -r "${__dplus_helper_store_dependencies_src}" ]; then
      logMessage ERROR "packageDependencies-Datei ${__dplus_helper_store_dependencies_src} ist nicht lesbar"
      return 1
    fi
    cp "${__dplus_helper_store_dependencies_src}" "${__dplus_helper_store_dependencies_dest}"
    logMessage INFO "Registriere packageDependencies aus ${__dplus_helper_store_dependencies_src}"
    return 0
  }

  helper_register_package_dependencies() {
    __dplus_helper_store_dependencies "$1"
  }

  helper_use_package_dependencies() {
    __dplus_helper_store_dependencies "$1"
  }

  checkPackageDependencies() {
    __dplus_helper_check_pkg_src="${1:-${__dplus_helper_project_root}/packageDependencies}"
    if [ -z "${__dplus_helper_check_pkg_src}" ]; then
      __dplus_helper_check_pkg_src="${__dplus_helper_project_root}/packageDependencies"
    fi
    __dplus_helper_store_dependencies "${__dplus_helper_check_pkg_src}"
  }

  helper_runtime_notice() {
    logMessage INFO "$*"
  }

  __dplus_helper_service_state_dir="${__dplus_helper_state_dir}/services"
  mkdir -p "${__dplus_helper_service_state_dir}"

  __dplus_helper_service_link_dir="${INSTALL_ROOT:-${__dplus_helper_project_root}/.install}/service-links"
  mkdir -p "${__dplus_helper_service_link_dir}"

  __dplus_helper_mark_service_installed() {
    __dplus_helper_mark_service_name="$1"
    __dplus_helper_mark_service_dir="$2"
    ln -sfn "${__dplus_helper_mark_service_dir}" "${__dplus_helper_service_state_dir}/${__dplus_helper_mark_service_name}"
    ln -sfn "${__dplus_helper_mark_service_dir}" "${__dplus_helper_service_link_dir}/${__dplus_helper_mark_service_name}"
    logMessage INFO "Dienst ${__dplus_helper_mark_service_name} wurde für die lokale Installation verknüpft"
  }

  helper_install_service() {
    __dplus_helper_install_service_name="$1"
    __dplus_helper_install_service_dir="$2"
    if [ -z "${__dplus_helper_install_service_name}" ] || [ -z "${__dplus_helper_install_service_dir}" ]; then
      logMessage ERROR "Ungültige Parameter für helper_install_service"
      return 1
    fi
    if [ ! -d "${__dplus_helper_install_service_dir}" ]; then
      logMessage ERROR "Dienstverzeichnis ${__dplus_helper_install_service_dir} existiert nicht"
      return 1
    fi
    __dplus_helper_mark_service_installed "${__dplus_helper_install_service_name}" "${__dplus_helper_install_service_dir}"
    return 0
  }

  installService() {
    helper_install_service "$@"
  }

  helper_uninstall_service() {
    __dplus_helper_uninstall_service_name="$1"
    rm -f "${__dplus_helper_service_state_dir}/${__dplus_helper_uninstall_service_name}"
    rm -f "${__dplus_helper_service_link_dir}/${__dplus_helper_uninstall_service_name}"
    logMessage INFO "Dienst ${__dplus_helper_uninstall_service_name} wurde aus der lokalen Installation entfernt"
    return 0
  }

  removeService() {
    helper_uninstall_service "$@"
  }

  helper_print_service_status() {
    __dplus_helper_print_status_service_name="$1"
    if [ -L "${__dplus_helper_service_state_dir}/${__dplus_helper_print_status_service_name}" ]; then
      printf 'Dienst %s ist lokal verknüpft.\n' "${__dplus_helper_print_status_service_name}"
    else
      printf 'Dienst %s ist nicht verknüpft.\n' "${__dplus_helper_print_status_service_name}"
    fi
  }

  serviceIsUp() {
    __dplus_helper_service_is_up_name="$1"
    if [ -L "${__dplus_helper_service_state_dir}/${__dplus_helper_service_is_up_name}" ]; then
      return 0
    fi
    return 1
  }

  __dplus_helper_filesets_state_dir="${__dplus_helper_state_dir}/filesets"
  mkdir -p "${__dplus_helper_filesets_state_dir}"

  __dplus_helper_trim() (
    __dplus_helper_trim_value="${1-}"
    __dplus_helper_trim_value="${__dplus_helper_trim_value#${__dplus_helper_trim_value%%[![:space:]]*}}"
    __dplus_helper_trim_value="${__dplus_helper_trim_value%${__dplus_helper_trim_value##*[![:space:]]}}"
    printf '%s' "${__dplus_helper_trim_value}"
  )

  __dplus_helper_filesets_root() (
    __dplus_helper_filesets_root_value="${pkgFileSets-}"
    if [ -z "${__dplus_helper_filesets_root_value}" ]; then
      if [ -d "${INSTALL_ROOT:-}/FileSets" ]; then
        __dplus_helper_filesets_root_value="${INSTALL_ROOT}/FileSets"
      elif [ -d "${__dplus_helper_project_root}/FileSets" ]; then
        __dplus_helper_filesets_root_value="${__dplus_helper_project_root}/FileSets"
      else
        __dplus_helper_filesets_root_value=""
      fi
    fi
    printf '%s' "${__dplus_helper_filesets_root_value}"
  )

  __dplus_helper_filesets_target_root="${DPLUS_SIMULATOR_FILESETS_TARGET_ROOT:-}"
  if [ -z "${__dplus_helper_filesets_target_root}" ]; then
    if [ -n "${INSTALL_ROOT:-}" ]; then
      __dplus_helper_filesets_target_root="${INSTALL_ROOT}/filesets-target"
    else
      __dplus_helper_filesets_target_root="${__dplus_helper_project_root}/.install/filesets-target"
    fi
  fi

  __dplus_helper_resolve_target_path() {
    __dplus_helper_resolve_absolute_path="$1"
    __dplus_helper_resolve_trimmed="$(__dplus_helper_trim "${__dplus_helper_resolve_absolute_path}")"
    if [ -z "${__dplus_helper_resolve_trimmed}" ]; then
      return 1
    fi
    __dplus_helper_resolve_trimmed="${__dplus_helper_resolve_trimmed#/}"
    printf '%s/%s' "${__dplus_helper_filesets_target_root}" "${__dplus_helper_resolve_trimmed}"
  }

  __dplus_helper_copy_file_if_present() {
    __dplus_helper_copy_source="$1"
    __dplus_helper_copy_destination="$2"
    if [ ! -f "${__dplus_helper_copy_source}" ]; then
      logMessage WARN "Fallback: Quelldatei ${__dplus_helper_copy_source} nicht gefunden"
      return 1
    fi
    mkdir -p "$(dirname "${__dplus_helper_copy_destination}")"
    cp "${__dplus_helper_copy_source}" "${__dplus_helper_copy_destination}"
    return 0
  }

  checkFileSets() {
    __dplus_helper_check_filesets_root_value="$(__dplus_helper_filesets_root)"
    if [ -z "${__dplus_helper_check_filesets_root_value}" ] || [ ! -d "${__dplus_helper_check_filesets_root_value}" ]; then
      logMessage INFO "Fallback: Keine FileSets gefunden – überspringe Prüfung"
      return 0
    fi
    : > "${__dplus_helper_filesets_state_dir}/last_check"
    printf '%s\n' "${__dplus_helper_check_filesets_root_value}" > "${__dplus_helper_filesets_state_dir}/last_check"
    logMessage INFO "Fallback: prüfe FileSets in ${__dplus_helper_check_filesets_root_value}"
    return 0
  }

  updateFileSets() {
    __dplus_helper_update_root="$(__dplus_helper_filesets_root)"
    if [ -z "${__dplus_helper_update_root}" ] || [ ! -d "${__dplus_helper_update_root}" ]; then
      logMessage INFO "Fallback: Keine FileSets gefunden – überspringe Aktualisierung"
      return 0
    fi

    __dplus_helper_update_action="${scriptAction:-INSTALL}"
    __dplus_helper_update_version_independent_dir="${versionIndependentFileSet:-${__dplus_helper_update_root}/VersionIndependent}"
    __dplus_helper_update_patch_dir="${patchSourceDir:-${__dplus_helper_update_root}/PatchSource}"

    mkdir -p "${__dplus_helper_filesets_target_root}"
    : > "${__dplus_helper_filesets_state_dir}/last_files"
    printf '%s\n' "${__dplus_helper_update_action}" > "${__dplus_helper_filesets_state_dir}/last_action"
    printf '%s\n' "${__dplus_helper_update_root}" > "${__dplus_helper_filesets_state_dir}/last_source"

    __dplus_helper_update_list_file="${__dplus_helper_update_root}/fileListVersionIndependent"
    if [ -f "${__dplus_helper_update_list_file}" ]; then
      while IFS= read -r entry; do
        entry="$(__dplus_helper_trim "${entry}")"
        if [ -z "${entry}" ]; then
          continue
        fi
        case "${entry}" in
          \#*)
            continue
            ;;
        esac
        __dplus_helper_update_destination="$(__dplus_helper_resolve_target_path "${entry}")" || continue
        if [ "${__dplus_helper_update_action}" = "UNINSTALL" ]; then
          rm -f "${__dplus_helper_update_destination}"
          printf '%s\n' "remove:${__dplus_helper_update_destination}" >> "${__dplus_helper_filesets_state_dir}/last_files"
          continue
        fi
        __dplus_helper_update_base="${entry##*/}"
        __dplus_helper_update_source=""
        if [ -f "${__dplus_helper_update_version_independent_dir}/${__dplus_helper_update_base}" ]; then
          __dplus_helper_update_source="${__dplus_helper_update_version_independent_dir}/${__dplus_helper_update_base}"
        elif [ -f "${__dplus_helper_update_root}/${__dplus_helper_update_base}" ]; then
          __dplus_helper_update_source="${__dplus_helper_update_root}/${__dplus_helper_update_base}"
        fi
        if __dplus_helper_copy_file_if_present "${__dplus_helper_update_source}" "${__dplus_helper_update_destination}"; then
          printf '%s\n' "copy:${__dplus_helper_update_destination}" >> "${__dplus_helper_filesets_state_dir}/last_files"
        fi
      done < "${__dplus_helper_update_list_file}"
    fi

    __dplus_helper_update_patched_list="${__dplus_helper_update_root}/fileListPatched"
    if [ -f "${__dplus_helper_update_patched_list}" ]; then
      while IFS= read -r entry; do
        entry="$(__dplus_helper_trim "${entry}")"
        if [ -z "${entry}" ]; then
          continue
        fi
        case "${entry}" in
          \#*)
            continue
            ;;
        esac
        __dplus_helper_update_destination="$(__dplus_helper_resolve_target_path "${entry}")" || continue
        __dplus_helper_update_base="${entry##*/}"
        if [ "${__dplus_helper_update_action}" = "UNINSTALL" ]; then
          __dplus_helper_update_orig_file="${__dplus_helper_update_patch_dir}/${__dplus_helper_update_base}.orig"
          if [ -f "${__dplus_helper_update_orig_file}" ]; then
            if __dplus_helper_copy_file_if_present "${__dplus_helper_update_orig_file}" "${__dplus_helper_update_destination}"; then
              printf '%s\n' "restore:${__dplus_helper_update_destination}" >> "${__dplus_helper_filesets_state_dir}/last_files"
            fi
          else
            rm -f "${__dplus_helper_update_destination}"
            printf '%s\n' "remove:${__dplus_helper_update_destination}" >> "${__dplus_helper_filesets_state_dir}/last_files"
          fi
          continue
        fi

        __dplus_helper_update_patched_file="${__dplus_helper_update_patch_dir}/${__dplus_helper_update_base}"
        if [ -f "${__dplus_helper_update_patched_file}" ]; then
          if __dplus_helper_copy_file_if_present "${__dplus_helper_update_patched_file}" "${__dplus_helper_update_destination}"; then
            printf '%s\n' "patch:${__dplus_helper_update_destination}" >> "${__dplus_helper_filesets_state_dir}/last_files"
          fi
          continue
        fi

        __dplus_helper_update_orig_file="${__dplus_helper_update_patch_dir}/${__dplus_helper_update_base}.orig"
        __dplus_helper_update_patch_file="${__dplus_helper_update_patch_dir}/${__dplus_helper_update_base}.patch"
        if [ -f "${__dplus_helper_update_orig_file}" ] && [ -f "${__dplus_helper_update_patch_file}" ]; then
          __dplus_helper_update_temp_file="${__dplus_helper_update_destination}.tmp"
          cp "${__dplus_helper_update_orig_file}" "${__dplus_helper_update_temp_file}"
          if patch -s "${__dplus_helper_update_temp_file}" "${__dplus_helper_update_patch_file}"; then
            mv "${__dplus_helper_update_temp_file}" "${__dplus_helper_update_destination}"
            printf '%s\n' "patch:${__dplus_helper_update_destination}" >> "${__dplus_helper_filesets_state_dir}/last_files"
            continue
          fi
          rm -f "${__dplus_helper_update_temp_file}"
        fi
        logMessage WARN "Fallback: Konnte Patch-Datei für ${__dplus_helper_update_base} nicht anwenden"
      done < "${__dplus_helper_update_patched_list}"
    fi

    return 0
  }

  __dplus_helper_settings_state_dir="${__dplus_helper_state_dir}/dbus_settings"
  mkdir -p "${__dplus_helper_settings_state_dir}"

  DbusSettingsList() {
    printf '%s\n' "$@"
  }

  __dplus_helper_store_settings_lines() {
    __dplus_helper_store_settings_dest="$1"
    if [ "$#" -gt 0 ]; then
      shift
    fi
    printf '%s\n' "$@" > "${__dplus_helper_store_settings_dest}"
  }

  addAllDbusSettingsFromFile() {
    __dplus_helper_add_settings_file="$1"
    if [ ! -r "${__dplus_helper_add_settings_file}" ]; then
      logMessage ERROR "D-Bus-Definition ${__dplus_helper_add_settings_file} ist nicht lesbar"
      return 1
    fi
    __dplus_helper_add_settings_dest="${__dplus_helper_settings_state_dir}/registered_from_file.list"
    cp "${__dplus_helper_add_settings_file}" "${__dplus_helper_add_settings_dest}"
    logMessage INFO "Registriere D-Bus-Einstellungen aus ${__dplus_helper_add_settings_file}"
    return 0
  }

  addAllDbusSettings() {
    if [ "$#" -eq 1 ] && [ -f "$1" ]; then
      addAllDbusSettingsFromFile "$1"
      return $?
    fi
    __dplus_helper_add_inline_dest="${__dplus_helper_settings_state_dir}/registered_inline.list"
    __dplus_helper_store_settings_lines "${__dplus_helper_add_inline_dest}" "$@"
    logMessage INFO "Registriere D-Bus-Einstellungen aus Argumentliste"
    return 0
  }

  removeDbusSettingsFromFile() {
    __dplus_helper_remove_settings_file="$1"
    if [ -f "${__dplus_helper_settings_state_dir}/registered_from_file.list" ]; then
      rm -f "${__dplus_helper_settings_state_dir}/registered_from_file.list"
      logMessage INFO "Deregistriere D-Bus-Einstellungen (Datei ${__dplus_helper_remove_settings_file})"
    else
      logMessage INFO "Keine registrierten D-Bus-Einstellungen aus Datei vorhanden"
    fi
    return 0
  }

  removeDbusSettings() {
    if [ "$#" -eq 1 ] && [ -f "$1" ]; then
      removeDbusSettingsFromFile "$1"
      return 0
    fi
    rm -f "${__dplus_helper_settings_state_dir}/registered_inline.list"
    logMessage INFO "Deregistriere D-Bus-Einstellungen aus Argumentliste"
    return 0
  }

  helper_register_settings_with_metadata() {
    __dplus_helper_register_metadata_dest="${__dplus_helper_settings_state_dir}/metadata.list"
    cat > "${__dplus_helper_register_metadata_dest}"
    logMessage INFO "Registriere Einstellungen inklusive Metadaten"
    return 0
  }

  helper_register_settings() {
    __dplus_helper_register_simple_dest="${__dplus_helper_settings_state_dir}/simple.list"
    cat > "${__dplus_helper_register_simple_dest}"
    logMessage INFO "Registriere Einstellungen ohne Metadaten"
    return 0
  }

  helper_unregister_settings() {
    __dplus_helper_unregister_base_path="$1"
    rm -f "${__dplus_helper_settings_state_dir}/"*.list 2>/dev/null || true
    logMessage INFO "Deregistriere Einstellungen unter Basis ${__dplus_helper_unregister_base_path}"
    return 0
  }
}

source_helper_resources() {
  __dplus_source_helper_candidates=()
  __dplus_source_helper_candidate=""

  SETUP_HELPER_DETECTED_ROOT=""

  if [ -n "${SETUP_HELPER_ROOT:-}" ]; then
    if [ -d "${SETUP_HELPER_ROOT}" ]; then
      __dplus_source_helper_candidates+=("${SETUP_HELPER_ROOT}/HelperResources")
    elif [ -f "${SETUP_HELPER_ROOT}" ]; then
      __dplus_source_helper_candidates+=("${SETUP_HELPER_ROOT}")
    fi
  fi

  if [ -n "${HELPER_RESOURCE:-}" ]; then
    __dplus_source_helper_candidates+=("${HELPER_RESOURCE}")
  fi

  __dplus_source_helper_candidates+=(
    "${PROJECT_ROOT}/SetupHelper/HelperResources"
    "/data/SetupHelper/HelperResources"
    "/opt/venus/SetupHelper/HelperResources"
    "/opt/venusOS/SetupHelper/HelperResources"
    "/usr/share/SetupHelper/HelperResources"
  )

  __dplus_source_helper_cmd=""
  for __dplus_source_helper_cmd in setuphelper SetupHelper helperctl; do
    if command -v "${__dplus_source_helper_cmd}" >/dev/null 2>&1; then
      __dplus_source_helper_bin="$(command -v "${__dplus_source_helper_cmd}")"
      __dplus_source_helper_root="$(cd "$(dirname "${__dplus_source_helper_bin}")/.." && pwd -P 2>/dev/null)"
      if [ -n "${__dplus_source_helper_root}" ]; then
        __dplus_source_helper_candidates+=("${__dplus_source_helper_root}/HelperResources")
      fi
    fi
  done

  for __dplus_source_helper_candidate in "${__dplus_source_helper_candidates[@]}"; do
    [ -z "${__dplus_source_helper_candidate}" ] && continue

    if [ -f "${__dplus_source_helper_candidate}" ] && [ -r "${__dplus_source_helper_candidate}" ]; then
      remember_setup_helper_root "${__dplus_source_helper_candidate}"
      # shellcheck disable=SC1090
      source "${__dplus_source_helper_candidate}"
      return
    fi

    if [ -d "${__dplus_source_helper_candidate}" ]; then
      remember_setup_helper_root "${__dplus_source_helper_candidate}"
      if [ -r "${__dplus_source_helper_candidate}/forSetupScript" ]; then
        remember_setup_helper_root "${__dplus_source_helper_candidate}/forSetupScript"
        # shellcheck disable=SC1090
        source "${__dplus_source_helper_candidate}/forSetupScript"
        return
      fi

      if [ -r "${__dplus_source_helper_candidate}/IncludeHelpers" ]; then
        remember_setup_helper_root "${__dplus_source_helper_candidate}/IncludeHelpers"
        # shellcheck disable=SC1090
        source "${__dplus_source_helper_candidate}/IncludeHelpers"
        return
      fi

      __dplus_source_helper_files=(
        "${__dplus_source_helper_candidate}/CommonResources"
        "${__dplus_source_helper_candidate}/ServiceResources"
        "${__dplus_source_helper_candidate}/DbusSettingsResources"
      )

      __dplus_source_helper_file=""
      __dplus_source_helper_missing=0
      for __dplus_source_helper_file in "${__dplus_source_helper_files[@]}"; do
        if [ -r "${__dplus_source_helper_file}" ]; then
          # shellcheck disable=SC1090
          source "${__dplus_source_helper_file}"
        else
          __dplus_source_helper_missing=1
          break
        fi
      done

      if [ "${__dplus_source_helper_missing}" -eq 0 ]; then
        return
      fi
    fi
  done

  define_builtin_helper_fallback
}

begin_helper_session() {
  if command -v -- beginScript >/dev/null 2>&1; then
    beginScript
    return
  fi
  if command -v -- helper_begin >/dev/null 2>&1; then
    helper_begin
  fi
}

end_helper_session() {
  if command -v -- endScript >/dev/null 2>&1; then
    endScript "$@"
    return
  fi
  if command -v -- helper_end >/dev/null 2>&1; then
    helper_end "$@"
  fi
}

finalize_helper_session() {
  __dplus_finalize_helper_flags=()

  if [ "${filesUpdated}" = true ]; then
    __dplus_finalize_helper_flags+=("INSTALL_FILES")
  fi
  if [ "${servicesUpdated}" = true ]; then
    __dplus_finalize_helper_flags+=("INSTALL_SERVICES")
  fi
  if [ "${dbusSettingsUpdated}" = true ]; then
    __dplus_finalize_helper_flags+=("ADD_DBUS_SETTINGS")
  fi

  __dplus_finalize_helper_end_status=0
  if ! end_helper_session "${__dplus_finalize_helper_flags[@]}"; then
    __dplus_finalize_helper_end_status=$?
  fi

  cleanup_dbus_settings_state "${__dplus_finalize_helper_end_status}"

  return ${__dplus_finalize_helper_end_status}
}

install_service() {
  if call_helper_function_if_available installService "${SERVICE_NAME}" "${SERVICE_INSTALL_DIR}"; then
    return
  fi
  if call_helper_function_if_available helper_install_service "${SERVICE_NAME}" "${SERVICE_INSTALL_DIR}"; then
    return
  fi
  die "SetupHelper stellt keine Funktion zum Installieren des Dienstes bereit"
}

remove_service() {
  if call_helper_function_if_available removeService "${SERVICE_NAME}"; then
    return
  fi
  if call_helper_function_if_available helper_uninstall_service "${SERVICE_NAME}"; then
    return
  fi
  die "SetupHelper stellt keine Funktion zum Entfernen des Dienstes bereit"
}

build_dbus_settings_entries() {
  __dplus_build_dbus_list_path="$1"
  if [ ! -f "${__dplus_build_dbus_list_path}" ]; then
    die "settingsList ${__dplus_build_dbus_list_path} nicht gefunden"
  fi

  __dplus_build_dbus_buffer=""
  __dplus_build_dbus_count=0
  __dplus_build_dbus_line=""

  while IFS= read -r __dplus_build_dbus_line || [ -n "${__dplus_build_dbus_line}" ]; do
    __dplus_build_dbus_trimmed="$(trim_whitespace "${__dplus_build_dbus_line}")"
    if [ -n "${__dplus_build_dbus_trimmed}" ]; then
      __dplus_build_dbus_buffer+="${__dplus_build_dbus_trimmed}"$'\n'
      __dplus_build_dbus_count=$((__dplus_build_dbus_count + 1))
    fi
  done < "${__dplus_build_dbus_list_path}"

  if [ "${__dplus_build_dbus_count}" -gt 0 ]; then
    __dplus_build_dbus_buffer="${__dplus_build_dbus_buffer%$'\n'}"
    _dbus_settings_entries_payload="${__dplus_build_dbus_buffer}"
    _dbus_settings_entry_count=${__dplus_build_dbus_count}
    _dbus_settings_multiline="${__dplus_build_dbus_buffer}"
  else
    _dbus_settings_entries_payload=""
    _dbus_settings_entry_count=0
    _dbus_settings_multiline=""
  fi
}

write_dbus_settings_file() {
  __dplus_write_dbus_output_path="$1"

  if [ "${_dbus_settings_entry_count}" -gt 0 ]; then
    (
      __dplus_write_dbus_line=""
      set --
      while IFS= read -r __dplus_write_dbus_line || [ -n "${__dplus_write_dbus_line}" ]; do
        set -- "$@" "${__dplus_write_dbus_line}"
      done < <(printf '%s\n' "${_dbus_settings_entries_payload}")

      while [ "$#" -gt 0 ]; do
        printf '%s\n' "$1"
        shift
      done
    ) > "${__dplus_write_dbus_output_path}"
  else
    : > "${__dplus_write_dbus_output_path}"
  fi
}

reset_dbus_settings_tracking() {
  DBUS_SETTINGS_PERSISTENT_FILE="${INSTALL_ROOT}/${DBUS_SETTINGS_FILENAME}"
  DBUS_SETTINGS_STAGING_BACKUP=""
  DBUS_SETTINGS_PERSISTENT_BACKUP=""
  DBUS_SETTINGS_STAGING_CREATED=false
  DBUS_SETTINGS_PERSISTENT_UPDATED=false
  DBUS_SETTINGS_OPERATION=""
}

cleanup_dbus_settings_state() {
  __dplus_cleanup_end_status="${1:-0}"
  __dplus_cleanup_staging_file="${DBUS_SETTINGS_STAGING_FILE}"
  __dplus_cleanup_persistent_file="${DBUS_SETTINGS_PERSISTENT_FILE:-${INSTALL_ROOT}/${DBUS_SETTINGS_FILENAME}}"

  if [ "${__dplus_cleanup_end_status}" -ne 0 ]; then
    if [ -n "${DBUS_SETTINGS_STAGING_BACKUP}" ] && [ -f "${DBUS_SETTINGS_STAGING_BACKUP}" ]; then
      mv -f "${DBUS_SETTINGS_STAGING_BACKUP}" "${__dplus_cleanup_staging_file}"
    elif [ "${DBUS_SETTINGS_STAGING_CREATED}" = true ]; then
      rm -f "${__dplus_cleanup_staging_file}"
    fi

    if [ -n "${DBUS_SETTINGS_PERSISTENT_BACKUP}" ] && [ -f "${DBUS_SETTINGS_PERSISTENT_BACKUP}" ]; then
      mv -f "${DBUS_SETTINGS_PERSISTENT_BACKUP}" "${__dplus_cleanup_persistent_file}"
    elif [ "${DBUS_SETTINGS_PERSISTENT_UPDATED}" = true ]; then
      rm -f "${__dplus_cleanup_persistent_file}"
    fi
  else
    if [ -n "${DBUS_SETTINGS_STAGING_BACKUP}" ] && [ -f "${DBUS_SETTINGS_STAGING_BACKUP}" ]; then
      rm -f "${DBUS_SETTINGS_STAGING_BACKUP}"
    fi

    if [ -n "${DBUS_SETTINGS_PERSISTENT_BACKUP}" ] && [ -f "${DBUS_SETTINGS_PERSISTENT_BACKUP}" ]; then
      rm -f "${DBUS_SETTINGS_PERSISTENT_BACKUP}"
    fi

    if [ "${DBUS_SETTINGS_STAGING_CREATED}" = true ]; then
      rm -f "${__dplus_cleanup_staging_file}"
    fi
  fi

  reset_dbus_settings_tracking
}

register_dbus_settings() {
  __dplus_register_list_path="${PROJECT_ROOT}/settingsList"
  __dplus_register_staging_file="${DBUS_SETTINGS_STAGING_FILE}"
  __dplus_register_persistent_file="${INSTALL_ROOT}/${DBUS_SETTINGS_FILENAME}"
  __dplus_register_success=false

  DBUS_SETTINGS_OPERATION="register"
  DBUS_SETTINGS_PERSISTENT_FILE="${__dplus_register_persistent_file}"
  DBUS_SETTINGS_STAGING_BACKUP=""
  DBUS_SETTINGS_PERSISTENT_BACKUP=""
  DBUS_SETTINGS_STAGING_CREATED=false
  DBUS_SETTINGS_PERSISTENT_UPDATED=false

  build_dbus_settings_entries "${__dplus_register_list_path}"

  if [ "${_dbus_settings_entry_count}" -eq 0 ]; then
    die "Es konnten keine D-Bus-Definitionen für die Registrierung generiert werden"
  fi

  if [ -f "${__dplus_register_staging_file}" ]; then
    DBUS_SETTINGS_STAGING_BACKUP="$(mktemp "${TMPDIR:-/tmp}/DbusSettingsList.backup.XXXXXX")"
    cp -f "${__dplus_register_staging_file}" "${DBUS_SETTINGS_STAGING_BACKUP}"
  fi

  write_dbus_settings_file "${__dplus_register_staging_file}"
  DBUS_SETTINGS_STAGING_CREATED=true

  mkdir -p "${INSTALL_ROOT}"
  if [ -f "${__dplus_register_persistent_file}" ]; then
    DBUS_SETTINGS_PERSISTENT_BACKUP="$(mktemp "${TMPDIR:-/tmp}/DbusSettingsList.persist.backup.XXXXXX")"
    cp -f "${__dplus_register_persistent_file}" "${DBUS_SETTINGS_PERSISTENT_BACKUP}"
  fi
  install -m 644 "${__dplus_register_staging_file}" "${__dplus_register_persistent_file}"
  DBUS_SETTINGS_PERSISTENT_UPDATED=true

  if command -v -- endScript >/dev/null 2>&1 && [ -z "${__DPLUS_HELPER_FALLBACK_DEFINED:-}" ]; then
    dbusSettingsUpdated=true
    return
  fi

  if call_helper_function_if_available addAllDbusSettings; then
    __dplus_register_success=true
  elif call_helper_function_if_available addAllDbusSettings "${__dplus_register_staging_file}"; then
    __dplus_register_success=true
  elif [ -n "${_dbus_settings_multiline}" ] && call_helper_function_if_available addAllDbusSettings "${_dbus_settings_multiline}"; then
    __dplus_register_success=true
  fi

  if [ "${__dplus_register_success}" = true ]; then
    dbusSettingsUpdated=true
    return
  fi

  if [ -n "${DBUS_SETTINGS_STAGING_BACKUP}" ]; then
    mv -f "${DBUS_SETTINGS_STAGING_BACKUP}" "${__dplus_register_staging_file}"
    DBUS_SETTINGS_STAGING_BACKUP=""
  elif [ "${DBUS_SETTINGS_STAGING_CREATED}" = true ]; then
    rm -f "${__dplus_register_staging_file}"
  fi

  if [ -n "${DBUS_SETTINGS_PERSISTENT_BACKUP}" ]; then
    mv -f "${DBUS_SETTINGS_PERSISTENT_BACKUP}" "${__dplus_register_persistent_file}"
    DBUS_SETTINGS_PERSISTENT_BACKUP=""
  elif [ "${DBUS_SETTINGS_PERSISTENT_UPDATED}" = true ]; then
    rm -f "${__dplus_register_persistent_file}"
  fi

  die "SetupHelper stellt keine geeignete Funktion zum Registrieren der Einstellungen bereit"
}

unregister_dbus_settings() {
  __dplus_unregister_list_path="${PROJECT_ROOT}/settingsList"
  __dplus_unregister_staging_file="${DBUS_SETTINGS_STAGING_FILE}"
  __dplus_unregister_persistent_file="${INSTALL_ROOT}/${DBUS_SETTINGS_FILENAME}"
  __dplus_unregister_success=false
  __dplus_unregister_payload=""

  DBUS_SETTINGS_OPERATION="unregister"
  DBUS_SETTINGS_PERSISTENT_FILE="${__dplus_unregister_persistent_file}"
  DBUS_SETTINGS_STAGING_BACKUP=""
  DBUS_SETTINGS_PERSISTENT_BACKUP=""
  DBUS_SETTINGS_STAGING_CREATED=false
  DBUS_SETTINGS_PERSISTENT_UPDATED=false

  build_dbus_settings_entries "${__dplus_unregister_list_path}"

  if [ -f "${__dplus_unregister_staging_file}" ]; then
    DBUS_SETTINGS_STAGING_BACKUP="$(mktemp "${TMPDIR:-/tmp}/DbusSettingsList.backup.XXXXXX")"
    cp -f "${__dplus_unregister_staging_file}" "${DBUS_SETTINGS_STAGING_BACKUP}"
  fi

  if [ "${_dbus_settings_entry_count}" -gt 0 ]; then
    write_dbus_settings_file "${__dplus_unregister_staging_file}"
    DBUS_SETTINGS_STAGING_CREATED=true
  fi

  if [ -f "${__dplus_unregister_staging_file}" ]; then
    __dplus_unregister_payload="${__dplus_unregister_staging_file}"
  elif [ -f "${__dplus_unregister_persistent_file}" ]; then
    __dplus_unregister_payload="${__dplus_unregister_persistent_file}"
  fi

  if call_helper_function_if_available removeAllDbusSettings; then
    __dplus_unregister_success=true
  elif [ -n "${__dplus_unregister_payload}" ] && call_helper_function_if_available removeAllDbusSettings "${__dplus_unregister_payload}"; then
    __dplus_unregister_success=true
  elif [ -n "${_dbus_settings_multiline}" ] && call_helper_function_if_available removeAllDbusSettings "${_dbus_settings_multiline}"; then
    __dplus_unregister_success=true
  elif call_helper_function_if_available removeDbusSettings; then
    __dplus_unregister_success=true
  elif [ -n "${__dplus_unregister_payload}" ] && call_helper_function_if_available removeDbusSettings "${__dplus_unregister_payload}"; then
    __dplus_unregister_success=true
  elif [ -n "${_dbus_settings_multiline}" ] && call_helper_function_if_available removeDbusSettings "${_dbus_settings_multiline}"; then
    __dplus_unregister_success=true
  elif [ -z "${__dplus_unregister_payload}" ] && [ -z "${_dbus_settings_multiline}" ]; then
    __dplus_unregister_success=true
  fi

  if [ "${__dplus_unregister_success}" = true ]; then
    if [ -n "${DBUS_SETTINGS_STAGING_BACKUP}" ]; then
      rm -f "${DBUS_SETTINGS_STAGING_BACKUP}" "${__dplus_unregister_staging_file}" 2>/dev/null || true
      DBUS_SETTINGS_STAGING_BACKUP=""
    fi

    if [ -n "${DBUS_SETTINGS_PERSISTENT_BACKUP}" ]; then
      rm -f "${DBUS_SETTINGS_PERSISTENT_BACKUP}" "${__dplus_unregister_persistent_file}" 2>/dev/null || true
      DBUS_SETTINGS_PERSISTENT_BACKUP=""
    fi

    if [ -n "${__dplus_unregister_payload}" ] || [ -n "${_dbus_settings_multiline}" ]; then
      dbusSettingsUpdated=true
    fi
    return
  fi

  if [ -n "${DBUS_SETTINGS_STAGING_BACKUP}" ]; then
    mv -f "${DBUS_SETTINGS_STAGING_BACKUP}" "${__dplus_unregister_staging_file}"
    DBUS_SETTINGS_STAGING_BACKUP=""
  elif [ "${DBUS_SETTINGS_STAGING_CREATED}" = true ]; then
    rm -f "${__dplus_unregister_staging_file}"
  fi

  die "Deregistrierung der D-Bus-Settings fehlgeschlagen"
}

service_is_up() {
  if command -v -- serviceIsUp >/dev/null 2>&1; then
    set +e
    serviceIsUp "${SERVICE_NAME}"
    __dplus_service_is_up_status=$?
    set -e
    return "${__dplus_service_is_up_status}"
  fi

  if command -v -- helper_print_service_status >/dev/null 2>&1; then
    helper_print_service_status "${SERVICE_NAME}"
    return 0
  fi

  log INFO "Statusabfrage für Dienst ${SERVICE_NAME} nicht verfügbar"
  return 1
}

register_package_dependencies() {
  __dplus_register_pkg_resolved_action="${scriptAction:-}"

  LAST_PACKAGE_DEPENDENCY_CHECK_STATUS=""
  LAST_PACKAGE_DEPENDENCY_CHECK_ACTION=""
  LAST_PACKAGE_DEPENDENCY_CHECK_INSTALL_FAILED=""
  LAST_PACKAGE_DEPENDENCY_CHECK_FAIL_MESSAGE=""
  LAST_PACKAGE_DEPENDENCY_CHECK_CONFLICT=false

  if [ -z "${__dplus_register_pkg_resolved_action}" ]; then
    case "${RESOLVED_CLI_ACTION:-}" in
      install|INSTALL)
        __dplus_register_pkg_resolved_action="INSTALL"
        ;;
      uninstall|UNINSTALL)
        __dplus_register_pkg_resolved_action="UNINSTALL"
        ;;
      status|check|STATUS)
        __dplus_register_pkg_resolved_action="CHECK"
        ;;
    esac
  fi

  __dplus_register_pkg_normalized_action=""
  if [ -n "${__dplus_register_pkg_resolved_action}" ]; then
    __dplus_register_pkg_normalized_action="$(uppercase "${__dplus_register_pkg_resolved_action}")"
  fi

  if [ "${__dplus_register_pkg_normalized_action}" != "INSTALL" ]; then
    if [ -n "${__dplus_register_pkg_normalized_action}" ]; then
      log INFO "Überspringe packageDependencies-Prüfung (Aktion ${__dplus_register_pkg_normalized_action})"
    else
      log INFO "Überspringe packageDependencies-Prüfung (keine Installationsaktion erkannt)"
    fi
    return
  fi

  if [ ! -f "${PACKAGE_DEPENDENCIES_FILE}" ]; then
    log WARN "packageDependencies-Datei fehlt, überspringe Registrierung"
    return
  fi

  __dplus_register_pkg_status=0
  if call_helper_function_if_available checkPackageDependencies "${PACKAGE_DEPENDENCIES_FILE}"; then
    __dplus_register_pkg_status=$?
  else
    __dplus_register_pkg_status=$?
  fi

  __dplus_register_pkg_helper_action_after="${scriptAction:-}"
  __dplus_register_pkg_helper_install_failed="${installFailed:-}"
  __dplus_register_pkg_helper_install_fail_message="${installFailMessage:-}"
  __dplus_register_pkg_normalized_action_after=""
  if [ -n "${__dplus_register_pkg_helper_action_after}" ]; then
    __dplus_register_pkg_normalized_action_after="$(uppercase "${__dplus_register_pkg_helper_action_after}")"
  fi

  __dplus_register_pkg_normalized_install_failed="$(lowercase "${__dplus_register_pkg_helper_install_failed}")"
  __dplus_register_pkg_conflict_detected=false
  case "${__dplus_register_pkg_normalized_install_failed}" in
    true|1|yes)
      __dplus_register_pkg_conflict_detected=true
      ;;
  esac

  if [ -n "${__dplus_register_pkg_normalized_action_after}" ] && [ "${__dplus_register_pkg_normalized_action_after}" != "INSTALL" ]; then
    __dplus_register_pkg_conflict_detected=true
  fi

  LAST_PACKAGE_DEPENDENCY_CHECK_STATUS="${__dplus_register_pkg_status}"
  LAST_PACKAGE_DEPENDENCY_CHECK_ACTION="${__dplus_register_pkg_helper_action_after}"
  LAST_PACKAGE_DEPENDENCY_CHECK_INSTALL_FAILED="${__dplus_register_pkg_helper_install_failed}"
  LAST_PACKAGE_DEPENDENCY_CHECK_FAIL_MESSAGE="${__dplus_register_pkg_helper_install_fail_message}"
  LAST_PACKAGE_DEPENDENCY_CHECK_CONFLICT="${__dplus_register_pkg_conflict_detected}"

  if [ "${__dplus_register_pkg_status}" -eq 0 ]; then
    if [ "${__dplus_register_pkg_conflict_detected}" = true ]; then
      __dplus_register_pkg_conflict_message="${__dplus_register_pkg_helper_install_fail_message}"
      if [ -z "${__dplus_register_pkg_conflict_message}" ]; then
        if [ -n "${__dplus_register_pkg_normalized_action_after}" ] && [ "${__dplus_register_pkg_normalized_action_after}" != "INSTALL" ]; then
          __dplus_register_pkg_conflict_message="SetupHelper hat die Aktion ${__dplus_register_pkg_normalized_action_after} angefordert; Installation wird abgebrochen."
        else
          __dplus_register_pkg_conflict_message="SetupHelper meldete Paketkonflikte; die Installation wird abgebrochen."
        fi
      else
        if [ -n "${__dplus_register_pkg_normalized_action_after}" ] && [ "${__dplus_register_pkg_normalized_action_after}" != "INSTALL" ]; then
          __dplus_register_pkg_conflict_message="${__dplus_register_pkg_conflict_message} (scriptAction=${__dplus_register_pkg_normalized_action_after})"
        fi
      fi
      die "${__dplus_register_pkg_conflict_message}"
    fi

    return
  fi

  if [ "${__dplus_register_pkg_status}" -eq 127 ]; then
    log INFO "SetupHelper stellt keine Funktion checkPackageDependencies bereit; überspringe packageDependencies-Prüfung"
    return
  fi

  die "checkPackageDependencies meldete Fehler (Status ${__dplus_register_pkg_status}); Installation abgebrochen"
}


install_payload() {
  log INFO "Installationsdateien nach ${INSTALL_ROOT} kopieren"
  mkdir -p "${INSTALL_ROOT}"

  copy_tree "${PROJECT_ROOT}/src" "${INSTALL_ROOT}/src"
  copy_tree "${PROJECT_ROOT}/services" "${INSTALL_ROOT}/services"

  install -m 644 "${PROJECT_ROOT}/src/settings_schema.json" "${INSTALL_ROOT}/settings_schema.json"
  install -m 644 "${PROJECT_ROOT}/version" "${INSTALL_ROOT}/version"
  install -m 644 "${PROJECT_ROOT}/packageDependencies" "${INSTALL_ROOT}/packageDependencies"
  install -m 644 "${PROJECT_ROOT}/gitHubInfo" "${INSTALL_ROOT}/gitHubInfo"
  install -m 644 "${PROJECT_ROOT}/settingsList" "${INSTALL_ROOT}/settingsList"

  if [ -d "${PROJECT_ROOT}/FileSets" ]; then
    copy_tree "${PROJECT_ROOT}/FileSets" "${INSTALL_ROOT}/FileSets"
  fi
}

perform_install_preflight() {
  log INFO "Starte Preflight-Prüfung der Installationsumgebung"
  require_setuphelper_version "${REQUIRED_SETUP_HELPER_VERSION}"
  require_python3
  log INFO "python3 wurde gefunden"
}

perform_install() {
  filesUpdated=false
  servicesUpdated=false
  dbusSettingsUpdated=false

  perform_install_preflight

  begin_helper_session
  register_package_dependencies

  require_python_module "dbus_next"
  log INFO "Python-Modul dbus_next ist verfügbar"

  install_payload
  process_file_sets_for_action INSTALL
  filesUpdated=true

  install_service
  servicesUpdated=true

  register_dbus_settings

  finalize_helper_session
  log INFO "Installation abgeschlossen"
}

perform_uninstall() {
  filesUpdated=false
  servicesUpdated=false
  dbusSettingsUpdated=false

  begin_helper_session
  register_package_dependencies

  unregister_dbus_settings

  remove_service
  servicesUpdated=true

  process_file_sets_for_action UNINSTALL

  if [ -d "${INSTALL_ROOT}" ]; then
    log INFO "Entferne Installationsverzeichnis ${INSTALL_ROOT}"
    rm -rf "${INSTALL_ROOT}"
    filesUpdated=true
  fi

  finalize_helper_session
  log INFO "Deinstallation abgeschlossen"
}

perform_status() {
  filesUpdated=false
  servicesUpdated=false
  dbusSettingsUpdated=false

  begin_helper_session
  register_package_dependencies

  __dplus_status_reported=false
  if command -v -- serviceIsUp >/dev/null 2>&1; then
    if service_is_up; then
      log INFO "Dienst ${SERVICE_NAME} ist aktiv"
    else
      log WARN "Dienst ${SERVICE_NAME} ist nicht aktiv"
    fi
    __dplus_status_reported=true
  fi

  if [ "${__dplus_status_reported}" = false ] && command -v -- helper_print_service_status >/dev/null 2>&1; then
    helper_print_service_status "${SERVICE_NAME}"
    __dplus_status_reported=true
  fi

  if [ "${__dplus_status_reported}" = false ]; then
    log WARN "Keine Statusfunktion für Dienst ${SERVICE_NAME} verfügbar"
  fi

  finalize_helper_session
}

usage() {
  cat <<USAGE
Verwendung: ${0##*/} <install|uninstall|status>
USAGE
}

main() {
  __dplus_main_cli_action="${1:-}"
  __dplus_main_normalized_cli=""

  if [ -n "${__dplus_main_cli_action}" ]; then
    case "${__dplus_main_cli_action}" in
      install|uninstall|status)
        __dplus_main_normalized_cli="${__dplus_main_cli_action}"
        ;;
      -h|--help)
        usage
        return 0
        ;;
      *)
        usage
        return 1
        ;;
    esac
  fi

  __dplus_main_helper_action="${scriptAction:-}"
  if [ -z "${__dplus_main_helper_action}" ]; then
    case "${__dplus_main_normalized_cli:-install}" in
      install)
        __dplus_main_helper_action="INSTALL"
        __dplus_main_normalized_cli="install"
        ;;
      uninstall)
        __dplus_main_helper_action="UNINSTALL"
        ;;
      status)
        __dplus_main_helper_action="CHECK"
        ;;
    esac
  else
    __dplus_main_expected_from_cli=""
    case "${__dplus_main_normalized_cli}" in
      install) __dplus_main_expected_from_cli="INSTALL" ;;
      uninstall) __dplus_main_expected_from_cli="UNINSTALL" ;;
      status) __dplus_main_expected_from_cli="CHECK" ;;
    esac

    if [ -n "${__dplus_main_expected_from_cli}" ] && [ "${__dplus_main_helper_action}" != "${__dplus_main_expected_from_cli}" ]; then
      log WARN "scriptAction ${__dplus_main_helper_action} stimmt nicht mit der CLI-Aktion ${__dplus_main_normalized_cli} überein; verwende CLI-Aktion"
      __dplus_main_helper_action="${__dplus_main_expected_from_cli}"
    fi

    if [ -z "${__dplus_main_normalized_cli}" ]; then
      case "${__dplus_main_helper_action}" in
        INSTALL) __dplus_main_normalized_cli="install" ;;
        UNINSTALL) __dplus_main_normalized_cli="uninstall" ;;
        CHECK) __dplus_main_normalized_cli="status" ;;
        *)
          log WARN "Unbekannte scriptAction ${__dplus_main_helper_action}, verwende INSTALL"
          __dplus_main_helper_action="INSTALL"
          __dplus_main_normalized_cli="install"
          ;;
      esac
    fi
  fi

  scriptAction="${__dplus_main_helper_action}"

  if [ -n "${__dplus_main_normalized_cli}" ]; then
    RESOLVED_CLI_ACTION="${__dplus_main_normalized_cli}"
  else
    case "${scriptAction}" in
      INSTALL)
        RESOLVED_CLI_ACTION="install"
        ;;
      UNINSTALL)
        RESOLVED_CLI_ACTION="uninstall"
        ;;
      CHECK)
        RESOLVED_CLI_ACTION="status"
        ;;
      *)
        RESOLVED_CLI_ACTION=""
        ;;
    esac
  fi

  source_helper_resources

  case "${scriptAction}" in
    INSTALL)
      perform_install
      ;;
    UNINSTALL)
      perform_uninstall
      ;;
    CHECK)
      perform_status
      ;;
    *)
      log ERROR "Unbekannte scriptAction ${scriptAction}"
      usage
      return 1
      ;;
  esac
}

if [ -z "${DPLUS_SIMULATOR_SKIP_MAIN:-}" ]; then
  main "$@"
fi
